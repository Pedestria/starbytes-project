//DECLARATIONS
//__________________
//
//Import Declaration
import lib
//Function Declaration
[Usable]
func hello (hello:String) String {
	//Return Declaration
	return "Greetings!"
}
//Scope Declaration / Namespace Declaration
scope Scope0 {
	hello("Whatsup!")
	
}
//TemplateUtilExpression
[Usable,Serializable]
//Class Declaration
class MyClass {
    decl data:String 
    decl immutable otherData:String
    
    new(otherData:String) -> data(""),otherData(otherData);

    new() ->  data(""), otherData(""){
       
    }

    func doSomething(){
        print(data)
    }
}

//Interface Declaration
interface ClassInterface {

}
//Type Declaration
deftype IntOrString = { Integer || String }
deftype Func = {<<[a:String]}
//Alias Declaration
alias Int = Integer
alias SpecialNum = {Float || Double}
//Structure Delcaration
struct SomeStruct {

}
//Variable Declaration
decl hello:String = "Hello"
//Constant Declaration
decl imut myConst = 4
//Template Declaration
template Usable {

}

template Serializable {

}
decl hello:MyClass<String>
decl hello = new MyClass<String>();

enum Something {
	ONE
	TWO
	THREE
}

deftype FUNCTYPE = [String a,Number] >> Number

decl lambda hello:FUNCTYPE = [String a,Number b] >> Number {

}

//Secure Variables/Expressions
//THIS WAY! (Probably This Way!)
secure(decl var = %/(?:word1|word2)/g%) catch (error:AnyExpection) {

}
decl someVar = await method() catch {

}

//Possible new feature
//Secure Declaration
secure(decl var = someOption()) catch {

}

lazy func method(){

}

//Error Throwing Function

func someFunc (){

}

//Optional Return Function
func otherFunc () String? {

}








