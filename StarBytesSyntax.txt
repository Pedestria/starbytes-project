//DECLARATIONS
//__________________
//
//Import Declaration
import lib
//Function Declaration
[Usable]
func hello (hello:String) String {
	//Return Declaration
	return "Greetings!"
}
//Scope Declaration / Namespace Declaration
scope Scope0 {
	hello("Whatsup!")
	
}

//Class Declaration
class MyClass <T> {
    decl data:String 
    decl imut otherData:String
    
    new(otherData:String) -> data(""),otherData(otherData);

    new() ->  data(""), otherData(""){
       
    }

    func doSomething(){
        print(data)
    }
}

//Interface Declaration
interface ClassInterface {

}
//Type Declaration
deftype IntOrString = { Integer || String }
deftype Func = {<<[a:String]}

//Structure Delcaration
struct SomeStruct {

}
//Variable Declaration
decl hello:String = "Hello"
//Constant Declaration
decl imut myConst = 4


decl hello:MyClass<String>
decl hello = new MyClass<String>();

enum Something {
	ONE
	TWO
	THREE
}

deftype FUNCTYPE = [String a,Number] >> Number

decl lambda hello:FUNCTYPE = [String a,Number b] >> Number {

}

//Secure Variables/Expressions
//THIS WAY! (Probably This Way!)
// Regex compile throws an error ( func regexCompile(str:String) -> Regex!  )
secure(decl var = %/(?:word1|word2)/g%) catch (error:RegexParseExpection) {

}
decl someVar = await method() catch {

}

//Possible new feature
//Secure Declaration
// This funciton has an optional therefore if it returns no value it must be dealt with
// func someOption() -> Integer?
secure(decl var = someOption()) catch {

}

lazy func method(){

}

//Error Throwing Function

func someFunc (){

}

//Optional Return Function
func otherFunc () String? {

}








